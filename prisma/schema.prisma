// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum ValueReaction {
  like
  dislike
}


model Teacher {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  url         String
  contact     Contact?
  courses     TeacherOnCourse[]
  valorations Valoration[]
  comments Comment[]
}

model Contact {
  id          String  @id @default(uuid())
  urlLinkedin String
  urlGmail    String
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  teacherId   String  @unique
}

model Course {
  id       String            @id @default(uuid())
  name     String
  teachers TeacherOnCourse[]
  filters  Filter[]
}

model Cycle {
  id      String   @id @default(uuid())
  name    String
  filters Filter[]
}

model Faculty {
  id      String   @id @default(uuid())
  name    String
  careers Career[]
}

model Career {
  id        String   @id @default(uuid())
  name      String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  facultyId String
  filters   Filter[]
}

model TeacherOnCourse {
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  @@id([teacherId, courseId])
}

model Filter {
  id       String @id @default(uuid())
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  career   Career @relation(fields: [careerId], references: [id])
  careerId String
  cycle    Cycle  @relation(fields: [cycleId], references: [id])
  cycleId  String
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  role        Role         @default(user)
  image       String?
  valorations Valoration[]
  comments Comment[]
  reactions Reaction[]
}

model Comment {
  id    String @id @default(uuid())
  value String
  teacher Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
  user User @relation(fields: [userId], references: [id])
  userId String
  assignedAt DateTime @default(now())
  reactions Reaction[]
}

model Reaction {
  id    String        @id @default(uuid())
  value ValueReaction
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String
  user User @relation(fields: [userId], references: [id])
  userId String
  assignedAt DateTime @default(now())
}

model Valoration {
  id         String            @id @default(uuid())
  rating     Int
  difficulty Int
  learning   Int
  repeat     Boolean
  tags       ValorationOnTag[]
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  teacher    Teacher           @relation(fields: [teacherId], references: [id])
  teacherId  String
  assignedAt DateTime @default(now())

}

model Tag {
  id          String            @id @default(uuid())
  name        String  @unique
  valorations ValorationOnTag[]

}

model ValorationOnTag {
  id           String     @id @default(uuid())
  valoration   Valoration @relation(fields: [valorationId], references: [id])
  valorationId String
  tag          Tag        @relation(fields: [tagId], references: [id])
  tagId        String
}


